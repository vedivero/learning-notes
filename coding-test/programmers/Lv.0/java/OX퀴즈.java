// 문제 설명
// 덧셈, 뺄셈 수식들이 'X [연산자] Y = Z' 형태로 들어있는 문자열 배열 quiz가 매개변수로 주어집니다.
// 수식이 옳다면 "O"를 틀리다면 "X"를 순서대로 담은 배열을 return하도록 solution 함수를 완성해주세요.

// 제한사항
// 연산 기호와 숫자 사이는 항상 하나의 공백이 존재합니다. 단 음수를 표시하는 마이너스 기호와 숫자 사이에는 공백이 존재하지 않습니다.
// 1 ≤ quiz의 길이 ≤ 10
// X, Y, Z는 각각 0부터 9까지 숫자로 이루어진 정수를 의미하며, 각 숫자의 맨 앞에 마이너스 기호가 하나 있을 수 있고 이는 음수를 의미합니다.
// X, Y, Z는 0을 제외하고는 0으로 시작하지 않습니다.
// -10,000 ≤ X, Y ≤ 10,000
// -20,000 ≤ Z ≤ 20,000
// [연산자]는 + 와 - 중 하나입니다.

// 입출력 예
//  quiz	                                                        result
//  ["3 - 4 = -3", "5 + 6 = 11"]	                                ["X", "O"]
//  ["19 - 6 = 13", "5 + 66 = 71", "5 - 15 = 63", "3 - 1 = 2"]	    ["O", "O", "X", "O"]

class Solution {
    public String[] solution(String[] quiz) {
        String[] answer = new String[quiz.length];

        for (int i = 0; i < quiz.length; i++) {
            String exp = quiz[i];

            String[] temp = exp.split(" ");

            int x = Integer.valueOf(temp[0]);
            String op = temp[1];
            int y = Integer.valueOf(temp[2]);
            int z = Integer.valueOf(temp[4]);

            int result = op.equals("+") ? x + y : x - y;

            answer[i] = result == z ? "O" : "X";

        }
        return answer;
    }
}
// 이 문제는 각 요소를 쉽게 나눌 수 있도록 스페이스를 제공
// 첫 번째로 정답을 반환할 배열의 길이를 매개 변수의 길이로 초기화
// (문자열이 콤마로 구분되어 있어 해당 배열의 길이를 구할 수 있음)
// 전달되는 매개 변수의 길이 만큼 반복문을 실행
// 배열의 각 요소를 String Type에 담아서 차례 대로 처리
// 첫 번째 요소를 공백으로 나누어서 temp라는 배열에 값을 대입
// temp에 담긴 0번째 요소는 피 연산자, 1번째 요소는 연산 기호(+ or -)
// 2번째는 피 연산자, 3번째는 = 기호, 4번째는 연산 결과가 담김
// 삼항 연산자를 사용해서 1번째 요소가 + 기호이면 0 번째와 2 번째 요소를 더하고
// - 기호라면 0번째 요소와 2번째 요소를 빼기
// 그 결과 값이 4번째 요소와 일치하면 "O"라는 문자열을 answer[i] 번째에 대입
// 그 결과 값이 4번째 요소와 일치하지 않으면 "X"라는 문자열을 answer[i] 번째에 대입