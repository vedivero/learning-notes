//6조각
//같은 수의 피자 조각을 동일하게 먹어야 함
//n과 6의 최소 공배수
class Solution {
    public int solution(int n) {
        int pizza = 1;
        while (true){
            if((pizza*6) % n ==0){
                break;
            }
            pizza++;
        }
        return pizza;
    }
}
//6의 배수 중, n으로 나누어 떨어지는 가장 작은 배수
//최소 공배수
//(6 * x) % n == 0

//피자에 6(조각)을 곱한 수를, n명으로 나눈 나머지 값이 0이 되는 경우는
//모든 사람이 동일한 조각의 피자를 먹는 경우
//반복문을 통해 피자 개수를 하나씩 증가시키면서
//사람 수(n)로 나눈 결과 값이 0이 될때까지 반복

// 다른 풀이 방법
class Solution{
    public int solution(int n ){
        return n / gcd(6, n);
    }

    public int gcd(int m, int n){
        return m % n == 0 ? n : gcd(n, m % n);
    }
}
// 유클리드 호제법으로 최대 공약 수를 구하는 방법
// 두 수의 최대공약수는 큰 수를 작은 수로 나눈 나머지를 이용
// 한 수가, 다른 수로 나누어 떨어지면 = 최대공약수

// 예시
// m=12, n=4
// 12 % 4 = 0 -> 12는 4로 나누어 떨어짐
// 12의 약수 = 1,2,3,4,6,12
// 4의 약수 = 1,2,4

// 공약수 = 1,2,4
// 가장 큰 공약수 = 4

