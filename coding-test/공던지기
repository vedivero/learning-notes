function solution(numbers, k) {
    const index = ((k-1)*2) % numbers.length;
    return numbers[index]
}

// *k번째 받는 사람이 아닌, k번째 공을 던지는 사람을 찾는 문제

// 배열의 인덱스는 0부터 시작하기 때문에, K-1
// 첫번째로 던지는 사람 : K
// 두번째로 던지는 사람 : 첫번째로 공을 받은 사람
// 던진횟수가 K번일 때, 던지게 되는 그 사람을 찾는 문제

// 던질때마다 +2칸이 이동
// 던진 횟수 K 라는 의미는 -> 2칸 * (k-1)
// (첫번째 던질 때는 이동이 없는 시작 위치)
// 횟수가 증가할수록, 던진 거리가 +2씩 증가됨

// 처음 던짐, 던진거리:2
// 두번 던짐, 던진거리:4
// 세번 던짐, 던진거리:6
// 네번 던짐, 던진거리:8

// ====================

// 던진 거리의 값을 배열의 길이로 나머지 연산하는 이유
// 배열의 인덱스를 length-1로 강제하기 위함
// 배열은 끝을 넘으면 다시 처음으로 돌아오기 위함

// 강제하지 않으면?
// 존재하지 않는 배열의 인덱스를 가리키게 됨
// -> undefined 반환

// ===================

// K번째 던지는 사람 = 2칸씩 점프해서 도달한 사람
